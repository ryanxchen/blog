__NUXT_JSONP__("/article/5cdd790c9ae55c41e3feed97", (function(a){return {data:[{article:{_id:"5cdd790c9ae55c41e3feed97",meta:{createDate:a,updateDate:a},tags:["vue"],title:"vue源码阅读之初始化过程",content:"\u003Ch3\u003Eimport阶段\u003C\u002Fh3\u003E\n\u003Cp\u003E从打包入口文件入手，\u003Ccode\u003Escripts\u002Fconfig.js\u003C\u002Fcode\u003E, ➡️ \u003Ccode\u003Eresolve('web\u002Fentry-runtime.js')\u003C\u002Fcode\u003E\n⤵️\n入口文件 \u003Ccode\u003Esrc\u002Fplatforms\u002Fentry-runtime.js\u003C\u002Fcode\u003E, \u003Ccode\u003Eplatforms\u003C\u002Fcode\u003E 文件夹是跟平台相关的代码\n⤵️\n\u003Ccode\u003Esrc\u002Fplatforms\u002Fweb\u002Fruntime\u002Findex.js\u003C\u002Fcode\u003E，\u003Ccode\u003Eruntime\u002Findex.js\u003C\u002Fcode\u003E 里对该运行时代码做了特殊处理\n⤵️\n\u003Ccode\u003Esrc\u002Fcode\u002Findex.js\u003C\u002Fcode\u003E,真正入口文件\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode\u003E\u003Cspan class=\"token keyword\"\u003Eimport\u003C\u002Fspan\u003E Vue \u003Cspan class=\"token keyword\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'.\u002Finstance\u002Findex'\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F ...\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003EinitGlobalAPI\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F ...ssr相关代码\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eversion \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'__VERSION__'\u003C\u002Fspan\u003E\n\u003Cp\u003E\u003Cspan class=\"token keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Edefault\u003C\u002Fspan\u003E Vue\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E⤵️\n\u003Ccode\u003Esrc\u002Fcore\u002Finstance\u002Findex.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode\u003E\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EVue\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Eoptions\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token comment\"\u003E\u002F\u002F ...\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003E_init\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eoptions\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 添加 _init 函数\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003EinitMixin\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 主要是添加了 $data,$props,$watch,$set,$delete 几个属性和方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003EstateMixin\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 主要是添加了 $on,$off,$once,$emit 三个方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003EeventsMixin\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 主要添加了 _update, $forceUpdate, $destroy 三个方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003ElifecycleMixin\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 主要添加了 $nextTick 和 _render 两个方法以及一大堆renderHelpers\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003ErenderMixin\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cp\u003E\u003Cspan class=\"token keyword\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Edefault\u003C\u002Fspan\u003E Vue\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Einstance\u002Findex.js\u003C\u002Fcode\u003E 作用是按功能模块往 \u003Ccode\u003EVue\u003C\u002Fcode\u003E 原型和自身添加了许多属性和方法。\n再回到 \u003Ccode\u003EinitGlobalAPI(Vue)\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 一般使用的是实例里的方法\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eset \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eset\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Edelete \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E del\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EnextTick \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E nextTick\n\u003Cp\u003EVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eoptions \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E Object\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Ecreate\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Enull\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 循环出来的结果其实是三个 \u003Ccode\u003Ecomponents\u003C\u002Fcode\u003E,\u003Ccode\u003Edirectives\u003C\u002Fcode\u003E, \u003Ccode\u003Efilters\u003C\u002Fcode\u003E\u003C\u002Fspan\u003E\n\u003Cspan class=\"token constant\"\u003EASSET_TYPES\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token parameter\"\u003Etype\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eoptions\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Etype \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E‘s’\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E Object\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Ecreate\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Enull\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F this is used to identify the “base” constructor to extend all plain-object\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F components with in Weex’s multi-instance scenarios.\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eoptions\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E_base \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E Vue\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F builtInComponents 仅为内置组件 KeepAlive\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Eextend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eoptions\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Ecomponents\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E builtInComponents\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token function\"\u003EinitUse\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 添加 Vue.use\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003EinitMixin\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 添加 Vue.mixin\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003EinitExtend\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 添加 Vue.extend\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F 添加 Vue.component, Vue.directive, Vue.filter 方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003EinitAssetRegisters\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003EVue\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003EinitGlobalAPI\u003C\u002Fcode\u003E 作用也是继续添加了一些全局方法。\n现在 function Vue 大致就变成了如下样子：\u003C\u002Fp\u003E\n\u003Cpre class=\"language-js\"\u003E\u003Ccode\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F构造函数\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003EVue\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"token keyword\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003E_init\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F全局config对象，我们几乎不会用到\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Econfig \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\nkeyCodes\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E\n_lifecycleHooks\u003Cspan class=\"token operator\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E‘beforeCreate’\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E‘created’\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E…\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 默认的options配置，我们每个组件都会继承这个配置。\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eoptions \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003E\nbeforeCreate\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 比如 vue-router 就会注册这个回调，因此会每一个组件继承\u003C\u002Fspan\u003E\ncomponents\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 前面提到了，默认组件有三个 \u003Ccode\u003EKeepAlive\u003C\u002Fcode\u003E,\u003Ccode\u003Etransition\u003C\u002Fcode\u003E, \u003Ccode\u003EtransitionGroup\u003C\u002Fcode\u003E，这里注册的组件就是全局组件，因为任何一个组件中不用声明就能用了。所以全局组件的原理就是这么简单\u003C\u002Fspan\u003E\ndirectives\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 默认只有 \u003Ccode\u003Ev-show\u003C\u002Fcode\u003E 和 \u003Ccode\u003Ev-model\u003C\u002Fcode\u003E\u003C\u002Fspan\u003E\nfilters\n\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F一些全局方法\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Euse \u003Cspan class=\"token comment\"\u003E\u002F\u002F 注册插件\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Ecomponent \u003Cspan class=\"token comment\"\u003E\u002F\u002F 注册组件\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Edirective \u003Cspan class=\"token comment\"\u003E\u002F\u002F 注册指令\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EnextTick \u003Cspan class=\"token comment\"\u003E\u002F\u002F下一个tick执行函数\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eset\u003Cspan class=\"token operator\"\u003E\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Edelete\u003C\u002Fspan\u003E \u003Cspan class=\"token comment\"\u003E\u002F\u002F 数据的修改操作\u003C\u002Fspan\u003E\nVue\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Emixin \u003Cspan class=\"token comment\"\u003E\u002F\u002F 混入mixin用的\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002FVue.prototype 上有几种不同作用的方法\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F由initMixin 添加的 \u003Ccode\u003E_init\u003C\u002Fcode\u003E 方法，是Vue实例初始化的入口方法，会调用其他的功能初始话函数\u003C\u002Fspan\u003E\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E_init\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 由 initState 添加的三个用来进行数据操作的方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$data\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$props\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$watch\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$set\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$\u003Cspan class=\"token keyword\"\u003Edelete\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 由initEvents添加的事件方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$on\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$off\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$one\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$emit\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 由 lifecycle添加的生命周期相关的方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E_update\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$forceUpdate\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$destroy\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F在 platform 中添加的生命周期方法\u003C\u002Fspan\u003E\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$mount\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cspan class=\"token comment\"\u003E\u002F\u002F 由renderMixin添加的\u003Ccode\u003E$nextTick\u003C\u002Fcode\u003E 和 \u003Ccode\u003E_render\u003C\u002Fcode\u003E 以及一堆renderHelper\u003C\u002Fspan\u003E\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E$nextTick\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E_render\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E_b\n\u003Cspan class=\"token class-name\"\u003EVue\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eprototype\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E_e\n\u003Cspan class=\"token comment\"\u003E\u002F\u002F…\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E实例化阶段[new Vue({…})]\u003C\u002Fh3\u003E\n\u003Cp\u003E代码在 \u003Ccode\u003Esrc\u002Fcore\u002Finstance\u002Finit.js\u003C\u002Fcode\u003E 里。\n主要功能代码：\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E生成自增的唯一ID标识 \u003Ccode\u003Evm._uid = uid++\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E合并 \u003Ccode\u003Evm.constructor\u003C\u002Fcode\u003E 和传入的 \u003Ccode\u003Eoptions\u003C\u002Fcode\u003E，生成 \u003Ccode\u003Evm.$options\u003C\u002Fcode\u003E\n\u003Cul\u003E\n\u003Cli\u003E这一步使得可以在子组件能够使用全局的 directives、filters 等方法\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E挂载自身 \u003Ccode\u003Evm._self = vm\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E初始化生命周期、事件、渲染等相关钩子工作\n\u003Cul\u003E\n\u003Cli\u003EinitLifecycle(vm)\n\u003Cul\u003E\n\u003Cli\u003E定位第一个非抽象父级，并添加到 $children 里，\u003Ccode\u003Eparent.$children.push(vm)\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E添加很多变量，主要为 $parent、$children，$refs 也在这里定义了，其他 \u003Ccode\u003E_\u003C\u002Fcode\u003E开头的变量均为\b生命周期不同阶段状态的 flag\n\u003Cul\u003E\n\u003Cli\u003Evm.$parent = parent\u003C\u002Fli\u003E\n\u003Cli\u003Evm.$root = parent ? parent.$root : vm\u003C\u002Fli\u003E\n\u003Cli\u003Evm.$children = []\u003C\u002Fli\u003E\n\u003Cli\u003Evm.$refs = {}\u003C\u002Fli\u003E\n\u003Cli\u003Evm._watcher = null\u003C\u002Fli\u003E\n\u003Cli\u003Evm._inactive = null\u003C\u002Fli\u003E\n\u003Cli\u003Evm._directInactive = false\u003C\u002Fli\u003E\n\u003Cli\u003Evm._isMounted = false\u003C\u002Fli\u003E\n\u003Cli\u003Evm._isDestroyed = false\u003C\u002Fli\u003E\n\u003Cli\u003Evm._isBeingDestroyed = false\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EinitEvents(vm)\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E注册的是父组件事件\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EinitRender(vm)\n\u003Cul\u003E\n\u003Cli\u003E做 render 的准备工作，并未开始 render，如创建 vm._vnode，vm.$createElement，$attrs 和 $listeners\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EcallHook(vm, ‘beforeCreate’)\n\u003Cul\u003E\n\u003Cli\u003E调用 \u003Ccode\u003EbeforeCreate\u003C\u002Fcode\u003E 生命周期钩子\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EcallHook 里定义了：\u003Ccode\u003Eif (vm._hasHookEvent) {vm.$emit('hook:' + hook)}\u003C\u002Fcode\u003E，所以有个小技巧实现在在父组件通过 \u003Ccode\u003Ehook\u003C\u002Fcode\u003E 钩子，监听子组件生命周期方法:\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cpre class=\"language-html\"\u003E\u003Ccode\u003E  \u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token punctuation\"\u003E&lt;\u003C\u002Fspan\u003EChind-Component\u003C\u002Fspan\u003E \u003Cspan class=\"token attr-name\"\u003E\u003Cspan class=\"token namespace\"\u003E@hook:\u003C\u002Fspan\u003Eupdated\u003C\u002Fspan\u003E\u003Cspan class=\"token attr-value\"\u003E\u003Cspan class=\"token punctuation attr-equals\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E\"\u003C\u002Fspan\u003EdoSomething\u003Cspan class=\"token punctuation\"\u003E\"\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E\u002F\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EinitInjections(vm) \u002F\u002F resolve injections before data\u002Fprops\u003C\u002Fli\u003E\n\u003Cli\u003EinitState(vm)\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Edata\u003C\u002Fcode\u003E, \u003Ccode\u003Eprops\u003C\u002Fcode\u003E, \u003Ccode\u003Ecomputed\u003C\u002Fcode\u003E 等都是在这里初始化的，常见的面试考点比如\u003Ccode\u003EVue是如何实现数据响应化的\u003C\u002Fcode\u003E 答案就在这个函数中寻找\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EinitProvide(vm) \u002F\u002F resolve provide after data\u002Fprops\u003C\u002Fli\u003E\n\u003Cli\u003EcallHook(vm, ‘created’)\n\u003Cul\u003E\n\u003Cli\u003E调用 \u003Ccode\u003Ecreated\u003C\u002Fcode\u003E 生命周期钩子\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E存在 el ,则调用 \u003Ccode\u003E$mount\u003C\u002Fcode\u003E，\u003Ccode\u003Evm.$mount(vm.$options.el)\u003C\u002Fcode\u003E\n\u003Cul\u003E\n\u003Cli\u003E当然，el 也可以不写，而是在实例化的时候直接调用： \u003Ccode\u003Enew Vue({...}).$mount('#app')\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n",__v:0}}],fetch:{},mutations:void 0}}("2019-05-16 22:51:56")));